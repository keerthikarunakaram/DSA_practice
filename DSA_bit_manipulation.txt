### 1. Find the element that appears once in an array where every other element appears twice

Take a res variable to 0 & perform xor with all the elements in the array. It will give the unique element.

It's using two xor properties :
1. 0 ^ n = n
2. n ^ n = 0

Example : arr= [5,4,1,4,3,5,1]

res= 0 ^ 5= 5

   = 5 ^ 4
   
   = 5 ^ 4 ^ 1
   
   = 5 ^ 4 ^ 1 ^ 4 -> 5^1
   
   = 5 ^ 1 ^ 3

   = 5 ^ 1 ^ 3 ^ 5 -> 1^3

   = 1 ^ 3 ^ 1 ->1

   = 3


arr=[5,4,1,4,3,5,1]
res=0
for i in arr:
    res^=i
print(res)

### 2. Find the two non-repeating elements in an array of repeating elements/ Unique Numbers 2

1.  calculate res by performing xor between all the numbers. The res will be xor between 2 unique numbers
2.  apply formula and calculate res .
            res=res & (~(res-1))
3.  intialize 2 grps with 0
4.  perform & for all the numbers with res & if its equal to 0 then grp1 else grp2
5.  inside if , calculate the xor between the grp & each element which at the end will result in 2 unique numbers.

arr=[2,3,7,9,11,2,3,11]
res=0
for i in arr:
    res^=i
res=res & (~(res-1))
grp1,grp2=0,0
for j in arr:
    if(res & j)==0:
        grp1=grp1^j
    else:
        grp2=grp2^j
print(grp1,grp2)
    
### 3. Unique element in an array where all elements occur k times except one

1. create a counter with 32 bit ( max bit of integer ) 
2. increment the counter index with no if set bits in each number in the given array
3. from the resulting counter , perform modulus with k
4. the binary representation of counter will give the unique element

n=[1,2,4,4,2,1,1,2,4,7,1,2,4]
max_bits=32
cnt =[0]*max_bits
k=4
for i in range(max_bits):
    for j in range(len(n)):
        if(n[j] & (1<<i) !=0):
            cnt[i]+=1
res=0
for i in range(max_bits):
    res=res+(cnt[i] % k) * ( 1<<i)
res

### Add Binary

Given two binary strings a and b, return their sum as a binary string.

a,b="11","1"
print(bin(int(a,2)+int(b,2))[2:])

class Solution(object):
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        return bin(int(a,2)+int(b,2))[2:]
        i=len(a)-1
        j=len(b)-1
        carry=0
        res=""
        while i>=0 or j>=0:
            sum=carry
            if(i>=0): sum+=ord(a[i])-ord('0')
            if(j>=0): sum+=ord(b[j])-ord('0')
            i,j=i-1,j-1
            carry=1 if sum>1 else 0
            res+=str(sum % 2)

        if carry!=0 :
            res+=str(carry)
        
        return res[::-1]


 addBinary(11,1)       
 
 
 ### Reverse Bits
Reverse bits of a given 32 bits unsigned integer.

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        rev=0
        for i in range(32):
            rev=(rev<<1)|(n & 1)
            n>>=1
        return rev
sol=Solution()
res=sol.reverseBits(0o00000010100101000001111010011100)
print(res)